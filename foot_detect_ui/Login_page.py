import os
from SQL import MySQLDatabase
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QLabel, QLineEdit, QPushButton, QVBoxLayout, QHBoxLayout, QApplication, QScrollArea, QWidget, QComboBox, QMainWindow, QMessageBox, QProgressDialog


class Login_Form(QMainWindow):
    accepted_signal = QtCore.pyqtSignal()
    def __init__(self, app):
        super().__init__()
        self.app = app
        self.db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        self.setupUi(self)
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setFixedSize(1440, 810)
        base_dir = os.path.dirname(os.path.abspath(__file__))
        img_dir = os.path.join(base_dir, 'source', 'img')
        background_image = os.path.join(img_dir, 'background.gif')
        self.background_label = QtWidgets.QLabel(self)
        self.background_label.setGeometry(0, 0, 1440, 810)
        self.movie = QtGui.QMovie(background_image)
        self.background_label.setMovie(self.movie)
        self.background_label.setScaledContents(True)
        self.movie.start()
        self.gray_background = QtWidgets.QFrame(Form)
        self.gray_background.setGeometry(QtCore.QRect(570, 270, 300, 250))
        self.gray_background.setStyleSheet("background-color: white; border-radius: 10px;")
        self.gray_background.setObjectName("gray_background")
        id = QtGui.QFontDatabase.addApplicationFont("./source/Font/Cubic.ttf")
        _fontstr = QtGui.QFontDatabase.applicationFontFamilies(id)[0]
        font = QtGui.QFont(_fontstr, 12)
        self.app.setFont(font)
        self.username = QtWidgets.QLabel(self.gray_background)
        self.username.setGeometry(QtCore.QRect(20, 20, 260, 30))
        self.username.setFont(font)
        self.username.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.username.setWordWrap(False)
        self.username.setObjectName("username")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.gray_background)
        self.lineEdit_2.setGeometry(QtCore.QRect(20, 60, 260, 30))
        self.lineEdit_2.setStyleSheet("background-color: white; border: 1px solid lightgray;")
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_2 = QtWidgets.QLabel(self.gray_background)
        self.label_2.setGeometry(QtCore.QRect(20, 100, 260, 30))
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.gray_background)
        self.lineEdit.setGeometry(QtCore.QRect(20, 140, 260, 30))
        self.lineEdit.setStyleSheet("background-color: white; border: 1px solid lightgray;")
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setEchoMode(QLineEdit.Password)
        self.pushButton = QtWidgets.QPushButton(self.gray_background)
        self.pushButton.setGeometry(QtCore.QRect(110, 190, 80, 30))
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet("""
            QPushButton {
                background-color: lightgray; 
                border-radius: 5px;
            }
            QPushButton:pressed {
                background-color: gray;
            }
        """)
        self.pushButton.setDefault(True)
        self.pushButton.clicked.connect(self.on_login_clicked)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "旅人園藝師"))
        self.username.setText(_translate("Form", "請輸入管理者帳號:"))
        self.label_2.setText(_translate("Form", "請輸入管理者密碼:"))
        self.pushButton.setText(_translate("Form", "登入"))
    def initialize_data(self):
        self.worker_thread = WorkerThread_Initialize()
        self.worker_thread.finished.connect(self.on_worker_finished)
        self.worker_thread.start()
    def on_worker_finished(self):
        self.movie.stop()
        self.loading_dialog.close()
        self.close()
        self.accepted_signal.emit() 
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Information)
        msg_box.setWindowTitle("提示")
        QMessageBox.information(self, "提示", "首次登入請先至Manager表格中刪除預設密碼，以確保系統安全性，並新增自己的管理者密碼!")
        dialog = QDialog()
        dialog.setWindowTitle("請先註冊Manager的帳號及密碼")
        dialog.setModal(True)
        dialog.setFixedSize(380, 130)
        layout = QVBoxLayout()
        managername_layout = QHBoxLayout()
        managername_label = QLabel("Manager Name:")
        managername_input = QLineEdit()
        managername_layout.addWidget(managername_label)
        managername_layout.addWidget(managername_input)
        manager_password_layout = QHBoxLayout()
        manager_password_label = QLabel("Manager Password:")
        manager_password_input = QLineEdit()
        manager_password_layout.addWidget(manager_password_label)
        manager_password_layout.addWidget(manager_password_input)
        layout.addLayout(managername_layout)
        layout.addLayout(manager_password_layout)
        insert_button = QPushButton("Insert")
        layout.addWidget(insert_button, alignment=Qt.AlignCenter)
        dialog.setLayout(layout)
        def show_error_message(message):
                msg = QDialog()
                msg.setWindowTitle("錯誤")
                msg.setModal(True)
                layout = QVBoxLayout()
                text_label = QLabel(message)
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(msg.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)
                msg.setLayout(layout)
                msg.adjustSize()       
                msg.exec_()
        def show_success_message(message):
                msg = QDialog()
                msg.setWindowTitle("提示")
                msg.setModal(True)
                layout = QVBoxLayout()
                text_label = QLabel(message)
                text_label.setAlignment(Qt.AlignCenter)
                layout.addWidget(text_label)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(msg.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                layout.addWidget(ok_button, alignment=Qt.AlignCenter)
                msg.setLayout(layout)
                msg.adjustSize()       
                msg.exec_()
        def insert_manager_data():
            managername = managername_input.text()
            manager_password = manager_password_input.text()
            try:
                insertManagerDataInToSql(managername, manager_password)
                print("success")
                success_msg= f"插入資料成功，請刷新表格查看結果"
                dialog.accept()
                show_success_message(success_msg)
            except Exception as e:
                print("Error inserting data:", e)
                error_msg= f"插入資料錯誤，請先確認資料有無錯誤"
                dialog.accept()
                show_error_message(error_msg)
        insert_button.clicked.connect(insert_manager_data)
        dialog.exec_()         
    def show_loading_animation(self):
            self.loading_dialog.setFixedSize(400, 300)
            self.loading_dialog.setWindowTitle("加載中")
            self.loading_dialog.setModal(True)
            self.loading_dialog.setWindowFlags(self.loading_dialog.windowFlags() & ~Qt.WindowCloseButtonHint)
            self.layout = QVBoxLayout()
            self.base_dir = os.path.dirname(os.path.abspath(__file__))
            self.img_dir = os.path.join(self.base_dir, 'source', 'img')
            loading_image = os.path.join(self.img_dir, 'Loading.gif')
            self.loading_label = QtWidgets.QLabel(self)
            self.loading_label.setGeometry(0, 0, 100, 30)
            self.movie = QtGui.QMovie(loading_image)
            self.movie.setScaledSize(QtCore.QSize(300, 300))
            self.loading_label.setMovie(self.movie)
            self.loading_label.setScaledContents(True)
            self.movie.start()
            self.layout.addWidget(self.loading_label)
            self.loading_dialog.setLayout(self.layout)
            self.movie.start()
            self.loading_dialog.show()
    def on_login_clicked(self):
        isInit = False
        connection = pymysql.connect(host='127.0.0.1', user='root', password='', database='')
        query_initialize = f"CREATE DATABASE `city`"
        try:
            connection.cursor().execute(query_initialize)
            isInit = True
        except:
            pass
        connection.close()   
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        if not db.check_table_exists('manager'):
            db.create_table('manager', ['username', 'userpassword'])
            insertManagerDataInToSql('root', '1234')  
        username = self.lineEdit_2.text()
        password = self.lineEdit.text()
        print(f"Username: {username}, Password: {password}")
        db = MySQLDatabase(host='127.0.0.1', user='root', password='', database='city')
        query = f"SELECT * FROM `manager` WHERE `username` = \"{username}\" AND `userpassword` = \"{password}\""
        query_ex = f"SELECT * FROM `manager`"
        self.manager_data = db.execute_query(query)
        self.manager_ex_data = self.db.execute_query(query_ex)  
        try:
            if self.manager_ex_data:
                if self.manager_data:
                    if isInit:
                        dialog = QDialog()
                        dialog.setWindowTitle("提示")
                        dialog.setModal(True)
                        dialog.adjustSize()
                        layout = QVBoxLayout()
                        text_label = QLabel("首次登入，需要載入資料庫，可能需要花費一點時間!")
                        text_label.setAlignment(QtCore.Qt.AlignCenter)
                        layout.addWidget(text_label)
                        layout.addStretch(1)
                        ok_button = QPushButton("確定")
                        ok_button.clicked.connect(dialog.accept)
                        ok_button.setFixedWidth(100)
                        ok_button.setFixedHeight(30)
                        button_layout = QHBoxLayout()
                        button_layout.addStretch(1)
                        button_layout.addWidget(ok_button)
                        button_layout.addStretch(1)
                        layout.addLayout(button_layout)
                        dialog.setLayout(layout)
                        if dialog.exec_() == QDialog.Accepted:
                            self.show_loading_animation()
                            self.initialize_data()
                    else:
                        self.close()
                        self.accepted_signal.emit()
                else:
                    dialog = QDialog()
                    dialog.setWindowTitle("提示")
                    dialog.setModal(True)
                    dialog.resize(192, 108)
                    layout = QVBoxLayout()
                    text_label = QLabel("帳號或密碼錯誤，請確認後重新嘗試")
                    text_label.setAlignment(Qt.AlignCenter)
                    layout.addWidget(text_label)
                    ok_button = QPushButton("確定")
                    ok_button.clicked.connect(dialog.accept)
                    ok_button.setFixedWidth(100)
                    ok_button.setFixedHeight(30)
                    layout.addWidget(ok_button, alignment=Qt.AlignCenter)            
                    dialog.setLayout(layout)            
                    dialog.exec_()
            else:
                db.create_table('manager', ['username', 'userpassword'])
                insertManagerDataInToSql('root', '1234')
                dialog = QDialog()
                dialog.setWindowTitle("提示")
                dialog.setModal(True)
                dialog.adjustSize()
                layout = QVBoxLayout()
                text_label = QLabel("偵測到Manager遺失，已將密碼更新為預設密碼!")
                text_label.setAlignment(QtCore.Qt.AlignCenter)
                layout.addWidget(text_label)
                layout.addStretch(1)
                ok_button = QPushButton("確定")
                ok_button.clicked.connect(dialog.accept)
                ok_button.setFixedWidth(100)
                ok_button.setFixedHeight(30)
                button_layout = QHBoxLayout()
                button_layout.addStretch(1)
                button_layout.addWidget(ok_button)
                button_layout.addStretch(1)
                layout.addLayout(button_layout)
                dialog.setLayout(layout)
                dialog.exec_()
                self.close()
                self.accepted_signal.emit()
                msg = QDialog()
                msg.setWindowTitle("請重新註冊Manager的帳號及密碼")
                msg.setModal(True)
                msg.setFixedSize(380, 130)
                layout = QVBoxLayout()
                managername_layout = QHBoxLayout()
                managername_label = QLabel("Manager Name:")
                managername_input = QLineEdit()
                managername_layout.addWidget(managername_label)
                managername_layout.addWidget(managername_input)
                manager_password_layout = QHBoxLayout()
                manager_password_label = QLabel("Manager Password:")
                manager_password_input = QLineEdit()
                manager_password_layout.addWidget(manager_password_label)
                manager_password_layout.addWidget(manager_password_input)
                layout.addLayout(managername_layout)
                layout.addLayout(manager_password_layout)
                insert_button = QPushButton("Insert")
                layout.addWidget(insert_button, alignment=Qt.AlignCenter)
                msg.setLayout(layout)
                msg.exec_()
        except pymysql.MySQLError as e:
            self.show_dialog("錯誤", f"資料庫操作失敗: {e}")
